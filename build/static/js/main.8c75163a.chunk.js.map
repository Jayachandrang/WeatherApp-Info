{"version":3,"sources":["Reducers/weatherReducer.js","Actions/actionTypes.js","Reducers/index.js","Actions/weatherActions.js","Common/constant.js","Components/TempChart.js","Components/TempDetails.js","Components/TempSelection.js","Components/WeatherReport.js","App.js","serviceWorker.js","index.js"],"names":["initialState","loading","report","weatherReducer","state","action","type","payload","error","rootReducer","combineReducers","URL","fetchWeatherReportRequest","TempChart","data","useState","chartWidth","setChartWidth","chartRef","useRef","useEffect","current","offsetWidth","window","onresize","ref","style","width","height","margin","top","right","bottom","left","TempDetails","datesList","selectedDate","highlightedDate","format","chartData","setChartData","selDate","setSelDate","_","forEach","value","isSelected","length","listItems","map","item","Card","key","onClick","className","date","CardContent","Typography","variant","component","TempSelection","selTempFormat","setValue","FormControl","RadioGroup","aria-label","row","name","onChange","event","target","FormControlLabel","control","Radio","color","label","labelPlacement","WeatherReport","weatherReport","useSelector","setData","currentPage","setCurrentPage","setFormat","dayReport","setDayReport","setDatesList","dispatch","useDispatch","axios","get","then","response","list","fetchWeatherReportSuccess","catch","errMessage","message","fetchWeatherReportFailure","reports","reduce","cumm","moment","dt_txt","time","sigleRecord","Math","round","main","temp","text","push","chunk","keys","selCurrentPage","cond","Container","maxWidth","Forward","App","Boolean","location","hostname","match","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.8c75163a.chunk.js","sourcesContent":["import { FETCH_WEATHER_REPORT_REQUEST, FETCH_WEATHER_REPORT_SUCCESS, FETCH_WEATHER_REPORT_FAILURE } from './../Actions/actionTypes'\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    report: []\r\n}\r\n\r\nconst weatherReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FETCH_WEATHER_REPORT_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n        case FETCH_WEATHER_REPORT_SUCCESS:\r\n            return {\r\n                loading: false,\r\n                report: action.payload,\r\n                error: ''\r\n            }\r\n        case FETCH_WEATHER_REPORT_FAILURE:\r\n            return {\r\n                loading: false,\r\n                report: {},\r\n                error: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default weatherReducer","export const FETCH_WEATHER_REPORT_REQUEST = 'FETCH_WEATHER_REPORT_REQUEST';\r\nexport const FETCH_WEATHER_REPORT_SUCCESS = 'FETCH_WEATHER_REPORT_SUCCESS';\r\nexport const FETCH_WEATHER_REPORT_FAILURE  = 'FETCH_WEATHER_REPORT_FAILURE';\r\n","import weatherReducer from './weatherReducer'\nimport { combineReducers } from 'redux'\n\nconst rootReducer = combineReducers({\n    weatherReducer\n})\n\nexport default rootReducer","import axios from 'axios'\r\nimport * as constants from './../Common/constant'\r\nimport  { FETCH_WEATHER_REPORT_REQUEST, FETCH_WEATHER_REPORT_SUCCESS, FETCH_WEATHER_REPORT_FAILURE } from './actionTypes'\r\n\r\n\r\n\r\nconst URL= `http://api.openweathermap.org/data/2.5/forecast?q=${constants.LOCATION}&APPID=${constants.APPID}&cnt=${constants.COUNT}`\r\n\r\nconst fetchWeatherReportRequest = () => {\r\n    return {\r\n        type: FETCH_WEATHER_REPORT_REQUEST\r\n    }\r\n}\r\n\r\nconst fetchWeatherReportSuccess = (report) => {\r\n    return {\r\n        type: FETCH_WEATHER_REPORT_SUCCESS,\r\n        payload: report\r\n    }\r\n}\r\n\r\nconst fetchWeatherReportFailure = (error) => {\r\n    return {\r\n        type: FETCH_WEATHER_REPORT_FAILURE,\r\n        payload: error\r\n    }\r\n}\r\n\r\n\r\nexport const fetchReport = () => {\r\n    return (dispatch) => {\r\n        dispatch(fetchWeatherReportRequest)\r\n        axios.get(URL)\r\n            .then(response => {\r\n                const report = (response.data && response.data.list) ? response.data.list : []\r\n                dispatch(fetchWeatherReportSuccess(report))\r\n            })\r\n            .catch(error => {\r\n                const errMessage = error.message\r\n                dispatch(fetchWeatherReportFailure(errMessage))\r\n            })\r\n    }\r\n\r\n}\r\n\r\n","export const TITLE = \"Weather Info\"\nexport const DATE_FORMAT = \"DD-MMM-YYYY\"\nexport const HOUR_FORMAT = \"H:00\"\nexport const FAHRENHEIT = \"Fahrenheit\"\nexport const CELCIUS = \"Celcius\"\nexport const DEFAULT_SEL_DATE_INDEX = 0\nexport const ITEMS_PER_PAGE = 3\nexport const APPID= \"75f972b80e26f14fe6c920aa6a85ad57\"\nexport const LOCATION= \"Munich,de\"\nexport const COUNT= 40\n","import React, {useState, useEffect, useRef} from 'react'\r\nimport BarChart from 'react-bar-chart';\r\n\r\nexport default function TempChart(report) {\r\n\t\r\n    let data = report.data\r\n\tconst [chartWidth, setChartWidth] = useState(500);\r\n    const chartRef = useRef(null);\r\n    const margin = {top: 20, right: 20, bottom: 30, left: 40};\r\n\r\n\tuseEffect( () => {\r\n\t\tsetChartWidth(chartRef.current.offsetWidth); \r\n\t\twindow.onresize = () => {\r\n\t\t\tsetChartWidth(chartRef.current.offsetWidth); \r\n\t\t};\r\n\t},[chartWidth])\r\n\t   \r\n    return (\r\n        <div ref={chartRef}>\r\n            <div style={{width: '100%'}}> \r\n                <BarChart\r\n                    width={chartWidth}\r\n                    height={500}\r\n                    margin={margin}\r\n                    data={data}/>\r\n            </div>\r\n        </div>        \r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport _ from 'lodash'\r\nimport Card from '@material-ui/core/Card'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport FiberManualRecordOutlinedIcon from '@material-ui/icons/FiberManualRecordOutlined'\r\nimport TempChart from './TempChart'\r\nimport * as constants from './../Common/constant'\r\n\r\nexport default function TempDetails({ data, datesList, selectedDate, highlightedDate, format }) {\r\n    const [chartData, setChartData] = useState([])\r\n    const [selDate, setSelDate] = useState(highlightedDate)\r\n    const defaultSeldateIndex = constants.DEFAULT_SEL_DATE_INDEX\r\n\r\n    useEffect(() => {\r\n        _.forEach(data, function (value) {\r\n            value.isSelected = false\r\n        });\r\n\r\n        if (data[selDate])\r\n            setChartData(data[selDate])\r\n\r\n        if (!selDate && datesList.length > 0) {\r\n            setSelDate(datesList[defaultSeldateIndex])\r\n            setChartData(data[datesList[defaultSeldateIndex]])\r\n        }\r\n    }, [datesList, data, selDate, defaultSeldateIndex])\r\n\r\n    const listItems = datesList.map((item) => {\r\n\r\n        if (data[item] && data[item].length > 0) {\r\n            return <Card\r\n                key={item}\r\n                onClick={() => {\r\n                    data[item].isSelected = true\r\n                    selectedDate(selDate)\r\n                    setSelDate(item)\r\n                    setChartData(data[item])\r\n                }}\r\n                className={(data[item].isSelected || data[item][0].date === selDate ? 'active' : '') + ' card-size'}>\r\n                <CardContent>\r\n                    <Typography variant=\"h4\" component=\"h3\">\r\n                        Temp:\r\n                    </Typography>\r\n                    <Typography variant=\"h6\" component=\"h3\">\r\n                        {data[item][0].value} <FiberManualRecordOutlinedIcon className=\"degrees\" /> {format[0]}\r\n                    </Typography>\r\n                    <Typography variant=\"h4\" component=\"h3\">\r\n                        Date:\r\n                    </Typography>\r\n                    <Typography variant=\"h6\" component=\"h3\">\r\n                        {data[item][0].date}\r\n                    </Typography>\r\n                </CardContent>\r\n            </Card>\r\n        }\r\n        return ''\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            {listItems}\r\n            {chartData.length > 0 ? <TempChart data={chartData} /> : ''}\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport Radio from '@material-ui/core/Radio'\r\nimport RadioGroup from '@material-ui/core/RadioGroup'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport * as constants from './../Common/constant'\r\n\r\nexport default function TempSelection({selTempFormat}) {\r\n\r\n    const [value, setValue] = useState(constants.CELCIUS)\r\n  \r\n    return (\r\n        <FormControl component=\"fieldset\">\r\n            <RadioGroup aria-label=\"position\" row name=\"position\" value={value} onChange={(event) => {\r\n                    setValue(event.target.value);\r\n                    selTempFormat(event.target.value);\r\n                }} >\r\n                <FormControlLabel\r\n                    value= {constants.CELCIUS}\r\n                    control= {<Radio color=\"primary\" />}\r\n                    label= {constants.CELCIUS}\r\n                    labelPlacement= \"end\"\r\n                />\r\n                \r\n                <FormControlLabel\r\n                    value= {constants.FAHRENHEIT}\r\n                    control= {<Radio color=\"primary\" />}\r\n                    label= {constants.FAHRENHEIT}\r\n                    labelPlacement= \"end\"\r\n                />\r\n            </RadioGroup>\r\n        </FormControl>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport moment from 'moment'\r\nimport _ from 'lodash'\r\nimport Container from '@material-ui/core/Container'\r\nimport { Forward } from '@material-ui/icons'\r\nimport { fetchReport } from './../Actions/weatherActions'\r\nimport TempDetails from './TempDetails'\r\nimport TempSelection from './TempSelection'\r\nimport * as constants from './../Common/constant'\r\n\r\n/*\r\n  This method is used to iterate weather report on day wise.\r\n*/\r\nfunction WeatherReport() {\r\n\r\n\tconst weatherReport = useSelector(state => state.weatherReducer)\r\n\tconst [data, setData] = useState({ loading: true })\r\n\tconst [currentPage, setCurrentPage] = useState(1)\r\n\tconst [format, setFormat] = useState(constants.CELCIUS)\r\n\tconst [dayReport, setDayReport] = useState({})\r\n\tconst [datesList, setDatesList] = useState({})\r\n\tconst [selDate, setSelDate] = useState('')\r\n\tconst itemsPerPage = constants.ITEMS_PER_PAGE\r\n\r\n\tconst dispatch = useDispatch()\r\n\r\n\tuseEffect(() => {\r\n\t\tdispatch(fetchReport())\r\n\t}, [dispatch])\r\n\r\n\tuseEffect(() => {\r\n\r\n\t\tlet reports = weatherReport.report.reduce((cumm, item) => {\r\n\t\t\tlet date = moment(item.dt_txt).format(constants.DATE_FORMAT)\r\n\t\t\tlet time = moment(item.dt_txt).format(constants.HOUR_FORMAT)\r\n\t\t\tlet sigleRecord = {\r\n\t\t\t\tvalue: (format === constants.FAHRENHEIT) ? Math.round(item.main.temp) : Math.round((item.main.temp - 32) * 5 / 9),\r\n\t\t\t\tdate: date,\r\n\t\t\t\ttext: time,\r\n\t\t\t\tformat: format,\r\n\t\t\t\tisSelected: (selDate === date) ? true : false\r\n\t\t\t};\r\n\r\n\t\t\tif (!cumm[date]) {\r\n\t\t\t\tcumm[date] = []\r\n\r\n\t\t\t}\r\n\t\t\tcumm[date].push(sigleRecord)\r\n\r\n\t\t\treturn cumm;\r\n\t\t}, {});\r\n\t\t// Used chunk to split the arrays\r\n\t\tsetDatesList(_.chunk(_.keys(reports), itemsPerPage)[currentPage - 1])\r\n\t\tsetDayReport(reports);\r\n\t\tsetData(weatherReport);\r\n\t}, [weatherReport, format, currentPage, itemsPerPage, selDate])\r\n\r\n\tconst selTempFormat = value => {\r\n\t\tsetFormat(value)\r\n\t};\r\n\tconst selCurrentPage = cond => {\r\n\t\tsetCurrentPage(currentPage + cond)\r\n\t};\r\n\tconst selectedDate = date => {\r\n\t\tsetSelDate(date)\r\n\t};\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<h2> {constants.TITLE} </h2>\r\n\t\t\t{\r\n\t\t\t\tdata.loading ?\r\n\t\t\t\t\t<div className=\"loader\"></div> :\r\n\t\t\t\t\t<Container maxWidth=\"md\" className=\"base\">\r\n\t\t\t\t\t\t<TempSelection selTempFormat={selTempFormat} />\r\n\t\t\t\t\t\t<div className=\"navigation\">\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcurrentPage > 1 ?\r\n\t\t\t\t\t\t\t\t\t<Forward className=\"backward\" onClick={() => selCurrentPage(-1)} /> : ''\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tdatesList && datesList.length > -1 && currentPage < datesList.length - 1 ?\r\n\t\t\t\t\t\t\t\t\t<Forward className=\"forward\" onClick={() => selCurrentPage(1)} /> : ''\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdatesList && datesList.length > -1 ?\r\n\t\t\t\t\t\t\t\t<TempDetails data={dayReport} datesList={datesList} selectedDate={selectedDate} highlightedDate={selDate} format={format} /> : ''\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t</Container>\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default WeatherReport;\r\n","import React from 'react'\nimport WeatherReport from './Components/WeatherReport'\n\nimport './App.css';\n\nfunction App() {\n\t\n\treturn (\n\t\t\n\t\t<div>\n\t\t\t<WeatherReport />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport rootReducer from './Reducers'\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(\n    rootReducer,\n    applyMiddleware(thunk)\n)\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}